// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RepositoryLayer;

#nullable disable

namespace RepositoryLayer.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    [Migration("20240927122710_AddOwnAndResCosPassive")]
    partial class AddOwnAndResCosPassive
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Server.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Server.Models.CustomEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SavedSkillId")
                        .HasColumnType("uuid");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EffectColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ImageAttachId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id", "SavedSkillId");

                    b.HasIndex("Id");

                    b.HasIndex("ImageAttachId");

                    b.HasIndex("SavedSkillId");

                    b.ToTable("CustomEffect");
                });

            modelBuilder.Entity("Server.Models.DefenseSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SavedSkillId")
                        .HasColumnType("uuid");

                    b.Property<int>("AtkWeight")
                        .HasColumnType("integer");

                    b.Property<int>("BasePower")
                        .HasColumnType("integer");

                    b.Property<int>("CoinNo")
                        .HasColumnType("integer");

                    b.Property<int>("CoinPow")
                        .HasColumnType("integer");

                    b.Property<string>("DamageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DefenseType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ImageAttachId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkillAffinity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillAmt")
                        .HasColumnType("integer");

                    b.Property<string>("SkillEffect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkillLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id", "SavedSkillId");

                    b.HasIndex("Id");

                    b.HasIndex("ImageAttachId");

                    b.HasIndex("SavedSkillId");

                    b.ToTable("DefenseSkill");
                });

            modelBuilder.Entity("Server.Models.ImageObj", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("ImageObjs");
                });

            modelBuilder.Entity("Server.Models.MentalEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SavedSkillId")
                        .HasColumnType("uuid");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id", "SavedSkillId");

                    b.HasIndex("Id");

                    b.HasIndex("SavedSkillId");

                    b.ToTable("MentalEffect");
                });

            modelBuilder.Entity("Server.Models.OffenseSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SavedSkillId")
                        .HasColumnType("uuid");

                    b.Property<int>("AtkWeight")
                        .HasColumnType("integer");

                    b.Property<int>("BasePower")
                        .HasColumnType("integer");

                    b.Property<int>("CoinNo")
                        .HasColumnType("integer");

                    b.Property<int>("CoinPow")
                        .HasColumnType("integer");

                    b.Property<string>("DamageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ImageAttachId")
                        .HasColumnType("uuid");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkillAffinity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillAmt")
                        .HasColumnType("integer");

                    b.Property<string>("SkillEffect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkillLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id", "SavedSkillId");

                    b.HasIndex("Id");

                    b.HasIndex("ImageAttachId");

                    b.HasIndex("SavedSkillId");

                    b.ToTable("OffenseSkill");
                });

            modelBuilder.Entity("Server.Models.PassiveSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SavedSkillId")
                        .HasColumnType("uuid");

                    b.Property<string>("Affinity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Req")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ReqNo")
                        .HasColumnType("integer");

                    b.Property<int>("ReqOwnEnvy")
                        .HasColumnType("integer");

                    b.Property<int>("ReqOwnGloom")
                        .HasColumnType("integer");

                    b.Property<int>("ReqOwnGluttony")
                        .HasColumnType("integer");

                    b.Property<int>("ReqOwnLust")
                        .HasColumnType("integer");

                    b.Property<int>("ReqOwnPride")
                        .HasColumnType("integer");

                    b.Property<int>("ReqOwnSloth")
                        .HasColumnType("integer");

                    b.Property<int>("ReqOwnWrath")
                        .HasColumnType("integer");

                    b.Property<int>("ReqResEnvy")
                        .HasColumnType("integer");

                    b.Property<int>("ReqResGloom")
                        .HasColumnType("integer");

                    b.Property<int>("ReqResGluttony")
                        .HasColumnType("integer");

                    b.Property<int>("ReqResLust")
                        .HasColumnType("integer");

                    b.Property<int>("ReqResPride")
                        .HasColumnType("integer");

                    b.Property<int>("ReqResSloth")
                        .HasColumnType("integer");

                    b.Property<int>("ReqResWrath")
                        .HasColumnType("integer");

                    b.Property<string>("SkillEffect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SkillLabel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id", "SavedSkillId");

                    b.HasIndex("Id");

                    b.HasIndex("SavedSkillId");

                    b.ToTable("PassiveSkill");
                });

            modelBuilder.Entity("Server.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("ViewCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("Server.Models.PostView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("PostView");
                });

            modelBuilder.Entity("Server.Models.SavedEGOInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImageAttachId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SaveTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SavedEgoKey")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ImageAttachId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedEGOInfos");
                });

            modelBuilder.Entity("Server.Models.SavedEgo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("EgoLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("SanityCost")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SavedSkillId")
                        .HasColumnType("uuid");

                    b.Property<double>("SinCostEnvy")
                        .HasColumnType("double precision");

                    b.Property<double>("SinCostGloom")
                        .HasColumnType("double precision");

                    b.Property<double>("SinCostGluttony")
                        .HasColumnType("double precision");

                    b.Property<double>("SinCostLust")
                        .HasColumnType("double precision");

                    b.Property<double>("SinCostPride")
                        .HasColumnType("double precision");

                    b.Property<double>("SinCostSloth")
                        .HasColumnType("double precision");

                    b.Property<double>("SinCostWrath")
                        .HasColumnType("double precision");

                    b.Property<double>("SinResistantEnvy")
                        .HasColumnType("double precision");

                    b.Property<double>("SinResistantGloom")
                        .HasColumnType("double precision");

                    b.Property<double>("SinResistantGluttony")
                        .HasColumnType("double precision");

                    b.Property<double>("SinResistantLust")
                        .HasColumnType("double precision");

                    b.Property<double>("SinResistantPride")
                        .HasColumnType("double precision");

                    b.Property<double>("SinResistantSloth")
                        .HasColumnType("double precision");

                    b.Property<double>("SinResistantWrath")
                        .HasColumnType("double precision");

                    b.Property<string>("SinnerColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SinnerIconId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SplashArtId")
                        .HasColumnType("uuid");

                    b.Property<double>("SplashArtScale")
                        .HasColumnType("double precision");

                    b.Property<double>("SplashArtTranslationX")
                        .HasColumnType("double precision");

                    b.Property<double>("SplashArtTranslationY")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SinnerIconId");

                    b.HasIndex("SplashArtId");

                    b.ToTable("SavedEgo");
                });

            modelBuilder.Entity("Server.Models.SavedIDInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImageAttachId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SaveTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SavedIdKey")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("ImageAttachId");

                    b.HasIndex("UserId");

                    b.ToTable("SavedIDInfos");
                });

            modelBuilder.Entity("Server.Models.SavedId", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<double>("BluntResistant")
                        .HasColumnType("double precision");

                    b.Property<double>("DefenseLevel")
                        .HasColumnType("double precision");

                    b.Property<double>("HP")
                        .HasColumnType("double precision");

                    b.Property<double>("MaxSpeed")
                        .HasColumnType("double precision");

                    b.Property<double>("MinSpeed")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("PierceResistant")
                        .HasColumnType("double precision");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SavedSkillId")
                        .HasColumnType("uuid");

                    b.Property<string>("SinnerColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SinnerIconId")
                        .HasColumnType("uuid");

                    b.Property<double>("SlashResistant")
                        .HasColumnType("double precision");

                    b.Property<Guid>("SplashArtId")
                        .HasColumnType("uuid");

                    b.Property<double>("SplashArtScale")
                        .HasColumnType("double precision");

                    b.Property<double>("SplashArtTranslationX")
                        .HasColumnType("double precision");

                    b.Property<double>("SplashArtTranslationY")
                        .HasColumnType("double precision");

                    b.Property<string>("StaggerResist")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SinnerIconId");

                    b.HasIndex("SplashArtId");

                    b.ToTable("SavedId");
                });

            modelBuilder.Entity("Server.Models.SavedSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FK_SavedEgo_SavedSkill_key")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FK_SavedId_SavedSkill_key")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FK_SavedEgo_SavedSkill_key")
                        .IsUnique();

                    b.HasIndex("FK_SavedId_SavedSkill_key")
                        .IsUnique();

                    b.ToTable("SavedSkill");
                });

            modelBuilder.Entity("Server.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("Expired")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("Server.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserIconId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("UserIconId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Server.Models.Comment", b =>
                {
                    b.HasOne("Server.Models.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.CustomEffect", b =>
                {
                    b.HasOne("Server.Models.ImageObj", "ImageAttach")
                        .WithMany()
                        .HasForeignKey("ImageAttachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.SavedSkill", null)
                        .WithMany("CustomEffects")
                        .HasForeignKey("SavedSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageAttach");
                });

            modelBuilder.Entity("Server.Models.DefenseSkill", b =>
                {
                    b.HasOne("Server.Models.ImageObj", "ImageAttach")
                        .WithMany()
                        .HasForeignKey("ImageAttachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.SavedSkill", null)
                        .WithMany("DefenseSkills")
                        .HasForeignKey("SavedSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageAttach");
                });

            modelBuilder.Entity("Server.Models.ImageObj", b =>
                {
                    b.HasOne("Server.Models.Post", null)
                        .WithMany("ImageAttaches")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("Server.Models.MentalEffect", b =>
                {
                    b.HasOne("Server.Models.SavedSkill", null)
                        .WithMany("MentalEffects")
                        .HasForeignKey("SavedSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.OffenseSkill", b =>
                {
                    b.HasOne("Server.Models.ImageObj", "ImageAttach")
                        .WithMany()
                        .HasForeignKey("ImageAttachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.SavedSkill", null)
                        .WithMany("OffenseSkills")
                        .HasForeignKey("SavedSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageAttach");
                });

            modelBuilder.Entity("Server.Models.PassiveSkill", b =>
                {
                    b.HasOne("Server.Models.SavedSkill", null)
                        .WithMany("PassiveSkills")
                        .HasForeignKey("SavedSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.Post", b =>
                {
                    b.HasOne("Server.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.SavedEGOInfo", b =>
                {
                    b.HasOne("Server.Models.ImageObj", "ImageAttach")
                        .WithMany()
                        .HasForeignKey("ImageAttachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageAttach");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.SavedEgo", b =>
                {
                    b.HasOne("Server.Models.SavedEGOInfo", null)
                        .WithOne("SavedEgo")
                        .HasForeignKey("Server.Models.SavedEgo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ImageObj", "SinnerIcon")
                        .WithMany()
                        .HasForeignKey("SinnerIconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ImageObj", "SplashArt")
                        .WithMany()
                        .HasForeignKey("SplashArtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SinnerIcon");

                    b.Navigation("SplashArt");
                });

            modelBuilder.Entity("Server.Models.SavedIDInfo", b =>
                {
                    b.HasOne("Server.Models.ImageObj", "ImageAttach")
                        .WithMany()
                        .HasForeignKey("ImageAttachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageAttach");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.SavedId", b =>
                {
                    b.HasOne("Server.Models.SavedIDInfo", null)
                        .WithOne("SavedId")
                        .HasForeignKey("Server.Models.SavedId", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ImageObj", "SinnerIcon")
                        .WithMany()
                        .HasForeignKey("SinnerIconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Server.Models.ImageObj", "SplashArt")
                        .WithMany()
                        .HasForeignKey("SplashArtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SinnerIcon");

                    b.Navigation("SplashArt");
                });

            modelBuilder.Entity("Server.Models.SavedSkill", b =>
                {
                    b.HasOne("Server.Models.SavedEgo", null)
                        .WithOne("Skill")
                        .HasForeignKey("Server.Models.SavedSkill", "FK_SavedEgo_SavedSkill_key")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Server.Models.SavedId", null)
                        .WithOne("Skill")
                        .HasForeignKey("Server.Models.SavedSkill", "FK_SavedId_SavedSkill_key")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Server.Models.Session", b =>
                {
                    b.HasOne("Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Server.Models.Tag", b =>
                {
                    b.HasOne("Server.Models.Post", "Posts")
                        .WithMany("Tags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.HasOne("Server.Models.ImageObj", "UserIcon")
                        .WithMany()
                        .HasForeignKey("UserIconId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserIcon");
                });

            modelBuilder.Entity("Server.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ImageAttaches");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Server.Models.SavedEGOInfo", b =>
                {
                    b.Navigation("SavedEgo")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.SavedEgo", b =>
                {
                    b.Navigation("Skill")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.SavedIDInfo", b =>
                {
                    b.Navigation("SavedId")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.SavedId", b =>
                {
                    b.Navigation("Skill")
                        .IsRequired();
                });

            modelBuilder.Entity("Server.Models.SavedSkill", b =>
                {
                    b.Navigation("CustomEffects");

                    b.Navigation("DefenseSkills");

                    b.Navigation("MentalEffects");

                    b.Navigation("OffenseSkills");

                    b.Navigation("PassiveSkills");
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
